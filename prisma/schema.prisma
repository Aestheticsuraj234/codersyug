generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id         Int           @id @default(autoincrement())
  userId     String        @unique
  name       String
  email      String        @unique
  imageUrl   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  blogs      Blog[]
  savedBlogs Blog[]        @relation("SavedBlogs")
  comments   Comment[]
  likesOn    Likes[]
  visited    VisitedBlog[]
  resources  Resources[]
}

model Blog {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  description String?       @db.LongText
  thumbnail   String?       @db.LongText
  likes       Int?          @default(0)
  Comments    Int?          @default(0)
  content     String?       @db.LongText
  readTime    Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    String?
  subCategory String?
  authorId    Int
  author      Profile       @relation(fields: [authorId], references: [id])
  savedBy     Profile[]     @relation("SavedBlogs")
  comments    Comment[]
  liked       Likes[]
  VisitedBy   VisitedBlog[]

  @@index([authorId])
}

model VisitedBlog {
  id        Int      @id @default(autoincrement())
  visitorId Int
  blogId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visitor   Profile  @relation(fields: [visitorId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])

  @@unique([visitorId, blogId])
  @@index([visitorId, blogId])
  @@index([blogId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  text        String
  commenterId Int
  blogId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  commenter   Profile  @relation(fields: [commenterId], references: [id])
  blog        Blog     @relation(fields: [blogId], references: [id])

  @@index([commenterId])
  @@index([blogId])
}

model Likes {
  id        Int      @id @default(autoincrement())
  userId    Int
  blogId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  liker     Profile  @relation(fields: [userId], references: [id])
  Blog      Blog     @relation(fields: [blogId], references: [id])

  @@unique([userId, blogId])
  @@index([userId, blogId])
  @@index([blogId])
}

model Resources {
  id           Int           @id @default(autoincrement())
  type         ResourceType? @default(EBOOK)
  Title        String
  Slug         String        @unique
  Description  String?       @db.LongText
  Thumbnail    String?       @db.LongText
  DownloadLink String?       @db.LongText
  Views        Int?          @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  category     Categories?
  subCategory  String?
  authorId     Int
  author       Profile       @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model SavedBlogs {
  A Int
  B Int

  @@unique([A, B], map: "_SavedBlogs_AB_unique")
  @@index([B], map: "_SavedBlogs_B_index")
  @@map("_SavedBlogs")
}

enum ResourceType {
  EBOOK
  NOTES
  VIDEO
  CHEATSHEETS
}

enum Categories {
  Frontend
  Backend
  DevOps
  Mobile
  Design
  React
  Vue
  DSA
  Android
  iOS
  Flutter
  Kotlin
  CodingTips
  JavaScript
  TypeScript
  Database
  MachineLearning
  Python
  ArtificialIntelligence
  Node
  Go
  Rust
  Swift
  Java
  CSharp
  CPlusPlus
  C
  WebDevelopment
  ProgrammingTips
  Git
  GitHub
}
