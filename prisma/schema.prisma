datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id         Int                  @id @default(autoincrement())
  userId     String               @unique
  name       String
  email      String               @unique
  imageUrl   String?
  blogs      Blog[] // This creates a one-to-many relationship with Blog
  savedBlogs Blog[]               @relation("SavedBlogs") // This creates a many-to-many relationship with Blog
  comments   Comment[] // This creates a one-to-many relationship with Comment
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  likesOn    Likes[] // This creates a one-to-many relationship with Likes
  visited    VisitedBlog[] // This creates a one-to-many relationship with VisitedBlog
  Purchased  purchasedResources[] // This creates a one-to-many relationship with purchasedResources
  resources  Resources[] // This creates a one-to-many relationship with Resources
}

model Blog {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  description String?       @db.LongText
  thumbnail   String?       @db.LongText
  likes       Int?          @default(0)
  Comments    Int?          @default(0)
  content     String?       @db.LongText
  readTime    Int? // Estimated time in minutes to read the blog
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    String?
  subCategory String?
  authorId    Int
  author      Profile       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  savedBy     Profile[]     @relation("SavedBlogs")
  comments    Comment[] // One-to-many relationship with comments
  // One-to-many relationship with likes
  liked       Likes[]
  VisitedBy   VisitedBlog[] // One-to-many relationship with VisitedBlog

  @@index([authorId])
}

model VisitedBlog {
  id        Int      @id @default(autoincrement())
  visitorId Int
  visitor   Profile  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  blogId    Int
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([visitorId, blogId])
  @@index([visitorId, blogId])
  @@index([blogId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  text        String
  commenterId Int
  commenter   Profile  @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  blogId      Int
  blog        Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([commenterId])
  @@index([blogId])
}

model Likes {
  id        Int      @id @default(autoincrement())
  liker     Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  blogId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([userId, blogId])
  @@index([blogId])
}

model Resources {
  id           Int                  @id @default(autoincrement())
  type         ResourceType?        @default(EBOOK)
  accessType   ResourceAccessType?  @default(FREE) // Default to free
  Title        String
  Slug         String               @unique
  Description  String?              @db.LongText
  Thumbnail    String?              @db.LongText
  Price        Float?               @default(0)
  DownloadLink String?              @db.LongText
  previewLink  String?              @db.LongText
  Views        Int?                 @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  category     Categories?
  techStack    TechStack[]
  attachment   Attachment[]
  subCategory  String?
  authorId     Int
  author       Profile              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  purchasedBy  purchasedResources[] // This creates a one-to-many relationship with purchasedResources

  @@index([authorId])
}

model TechStack {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  resourceId Int
  resource   Resources @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([resourceId])
}

model Attachment {
  id         Int       @id @default(autoincrement())
  name       String
  url        String    @db.Text
  resourceId Int
  resource   Resources @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([resourceId])
}

model purchasedResources {
  id               Int       @id @default(autoincrement())
  userId           Int
  user             Profile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceSlug     String
  isPuchasedByUser Boolean   @default(false)
  resource         Resources @relation(fields: [resourceSlug], references: [Slug], onDelete: Cascade)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([userId])
  @@index([resourceSlug])
}

model StripeCustomer {
  id               Int    @id @default(autoincrement())
  userId           Int    @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ResourceAccessType {
  FREE
  PAID
}

model test {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ResourceType {
  EBOOK
  NOTES
  VIDEO
  CHEATSHEETS
  PROJECTS
}

enum Categories {
  Frontend
  Backend
  DevOps
  Mobile
  Design
  React
  Vue
  DSA
  Android
  iOS
  Flutter
  Kotlin
  CodingTips
  JavaScript
  TypeScript
  Database
  MachineLearning
  Python
  ArtificialIntelligence
  Node
  Go
  Rust
  Swift
  Java
  CSharp
  CPlusPlus
  C
  WebDevelopment
  ProgrammingTips
  Git
  GitHub
  BlockChain
}
